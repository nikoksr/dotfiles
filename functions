# ~/.functions


##############################
#
# COMPRESSION
#
##############################

# Multithreaded compression via tar and pigz
# @param $1 - file or directory to compress
function compress() {
    # Check parameter
    if [ ! -n "$1" ]; then
        echo "Error: You have to specify a file or folder to compress"
        echo "Syntax: compress <file>"
        return 1
    fi

    # Execute compression
    tar cf - "$1" | pigz --best > "$1".tar.gz
}

# Decompression via tar and pigz
# @param $1 - compressed input
function decompress() {
    # Check parameter
    if [ ! -n "$1" ]; then
        echo "Error: You have to specify a file or folder to compress"
        echo "Syntax: decompress <file>"
        return 1
    fi

    # Execute decompression
    pigz -dc "$1" | tar xf -
}

##############################
#
# DOWNLOAD
#
##############################

# Downloading a file via Aria2c
# @param $1 - destination
# @param $2 - url to download
function get-file() {
    # Check parameter
    if [ ! -n "$1" ] || [ ! -n "$2" ]; then
        echo "Error: Missing parameter"
        echo "Syntax: dwnld-file <url> <destination>"
        return 1
    fi

    # Execute download via aria2
    aria2c --file-allocation=none -c -x 10 -s 10 -d "$1" "$2"
}

# Downloading a file via Aria2c
# @param $1 - destination
# @param $2 - url to download
function ytdl() {
    # Check parameter
    if [ ! -n "$1" ]; then
        echo "Error: Missing parameter"
        echo "Syntax: ytdl <url> ..."
        return 1
    fi

    youtube-dl -x --audio-quality 0 -i -o "%(title)s.%(ext)s" "$@"
}

##############################
#
# FZF
#
##############################

# Fzf: Search command history
fh() {
    local cmd="$(history -1 -500 | fzf --reverse | cut -c 8-)"
    echo $cmd
    eval $cmd
    zle reset-prompt
}

# fgl - git commit browser
gl() {
  git log --graph --color=always \
      --format="%C(auto)%h%d %s %C(black)%C(bold)%cr" "$@" |
  fzf --ansi --no-sort --reverse --tiebreak=index --bind=ctrl-s:toggle-sort \
      --header "Press CTRL-S to toggle sort" \
      --preview "echo {} | grep -o '[a-f0-9]\{7\}' | head -1 |
                 xargs -I % sh -c 'git show --color=always % | head -$LINES'" \
      --bind "enter:execute:echo {} | grep -o '[a-f0-9]\{7\}' | head -1 |
              xargs -I % sh -c 'vim fugitive://\$(git rev-parse --show-toplevel)/.git//% < /dev/tty'"
}

##############################
#
# DOTFILES
#
##############################

cp-dotfiles() {
  local df_path="/home/niko/dev/github/personal/dotfiles/"
  local conf_path="${df_path}config/"
  local vscode_path="${conf_path}Code - OSS/User/"

  mkdir -p "$vscode_path"

  echo "Copying files..."
  cpr -q --ignore-errors ~/.aliases "${df_path}aliases"
  cpr -q --ignore-errors ~/.functions "${df_path}functions"
  cpr -q --ignore-errors ~/.gitconfig "${df_path}gitconfig"
  cpr -q --ignore-errors ~/.gitmessage "${df_path}gitmessage"
  cpr -q --ignore-errors ~/.vimrc "${df_path}vimrc"
  cpr -q --ignore-errors ~/.Xresources "${df_path}Xresources"
  cpr -q --ignore-errors ~/.zshrc "${df_path}zshrc"
  cpr -q --ignore-errors ~/.zprofile "${df_path}zprofile"
  cpr -q --ignore-errors ~/.config/picom.conf "${conf_path}"
  cpr -q --ignore-errors ~/.config/alacritty/alacritty.yml "${conf_path}alacritty/"
  cpr -q --ignore-errors ~/.config/Code\ -\ OSS/User/settings.json "$vscode_path"
  cpr -q --ignore-errors ~/.config/starship.toml "${conf_path}"
  cpr -q --ignore-errors ~/.config/gammastep.conf "${conf_path}"

  echo "Copying folders..."
  cpr -rq --ignore-errors ~/.config/i3 "${conf_path}"
  cpr -rq --ignore-errors ~/.config/polybar "${conf_path}"
  cpr -rq --ignore-errors ~/.config/rofi "${conf_path}"
  cpr -rq --ignore-errors ~/.config/wofi "${conf_path}"
  cpr -rq --ignore-errors ~/.config/dunst "${conf_path}"
  cpr -rq --ignore-errors ~/.config/redshift "${conf_path}"
  cpr -rq --ignore-errors ~/.config/sway "${conf_path}"
  cpr -rq --ignore-errors ~/.config/waybar "${conf_path}"
  cpr -rq --ignore-errors ~/.config/mako "${conf_path}"
  cpr -rq --ignore-errors ~/.config/swappy "${conf_path}"
  cpr -rq --ignore-errors ~/.config/mako "${conf_path}"
  cpr -rq --ignore-errors ~/.config/wal/templates "${conf_path}wal/"
  cpr -rq --exclude 'vim_plug' --exclude 'undodir' --ignore-errors ~/.config/nvim "${conf_path}"
  cpr -rq --ignore-errors ~/.scripts/ "${df_path}scripts/"

  echo "Done..."
}
