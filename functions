# ~/.functions


##############################
#
# COMPRESSION
#
##############################


# Multithreaded compression via tar and pigz
# @param $1 - file or directory to compress
function compress() {
    # Check parameter
    if [ ! -n "$1" ]; then
        echo "Error: You have to specify a file or folder to compress"
        echo "Syntax: compress <file>"
        return 1
    fi

    # Execute compression
    tar cf - "$1" | pigz --best > "$1".tar.gz
}

# Decompression via tar and pigz
# @param $1 - compressed input
function decompress() {
    # Check parameter
    if [ ! -n "$1" ]; then
        echo "Error: You have to specify a file or folder to compress"
        echo "Syntax: decompress <file>"
        return 1
    fi

    # Execute decompression
    pigz -dc "$1" | tar xf -
}


##############################
#
# DOWNLOAD
#
##############################


# Downloading a file via Aria2c
# @param $1 - destination
# @param $2 - url to download
function dwnld-file() {
    # Check parameter
    if [ ! -n "$1" ] || [ ! -n "$2" ]; then
        echo "Error: Missing parameter"
        echo "Syntax: dwnld-file <url> <destination>"
        return 1
    fi

    # Execute download via aria2
    aria2c --file-allocation=none -c -x 10 -s 10 -d "$1" "$2"
}


##############################
#
# FZF
#
##############################

# Fzf: Preview and open files with xdg-open (Enter) or editor(CTRL-E).
f() {
  local out file key
  IFS=$'\n' out=("$(fzf-tmux --query="$1" --exit-0 --expect=ctrl-e --preview 'bat --color=always {}')")
  key=$(head -1 <<< "$out")
  file=$(head -2 <<< "$out" | tail -1)
  if [ -n "$file" ]; then
    [ "$key" = ctrl-e ] && ${EDITOR:-vim} "$file" || xdg-open "$file" 2> /dev/null 
  fi
}

# fglog - git commit browser
fglog() {
  git log --graph --color=always \
      --format="%C(auto)%h%d %s %C(black)%C(bold)%cr" "$@" |
  fzf --ansi --no-sort --reverse --tiebreak=index --bind=ctrl-s:toggle-sort \
      --header "Press CTRL-S to toggle sort" \
      --preview "echo {} | grep -o '[a-f0-9]\{7\}' | head -1 |
                 xargs -I % sh -c 'git show --color=always % | head -$LINES'" \
      --bind "enter:execute:echo {} | grep -o '[a-f0-9]\{7\}' | head -1 |
              xargs -I % sh -c 'vim fugitive://\$(git rev-parse --show-toplevel)/.git//% < /dev/tty'"
}


##############################
#
# DOTFILES
#
##############################


cp-dotfiles() {
  local df_path="/home/niko/dev/github/personal/dotfiles/"

  if [ -z "$df_path" ]; then
      echo "Error: No path was provided."
      return
  fi

  echo "Copying files..."
  cpr -q --ignore-errors ~/.aliases "${df_path}aliases"
  cpr -q --ignore-errors ~/.functions "${df_path}functions"
  cpr -q --ignore-errors ~/.gitconfig "${df_path}gitconfig"
  cpr -q --ignore-errors ~/.gitmessage "${df_path}gitmessage"
  cpr -q --ignore-errors ~/.vimrc "${df_path}vim/vimrc"
  cpr -q --ignore-errors ~/.config/nvim/init.vim "${df_path}nvim/init.vim"
  cpr -q --ignore-errors ~/.Xresources "${df_path}Xresources"
  cpr -q --ignore-errors ~/.zshrc "${df_path}zshrc"
  cpr -q --ignore-errors ~/.zprofile "${df_path}zprofile"
  cpr -q --ignore-errors ~/.config/picom.conf "${df_path}"
  cpr -q --ignore-errors ~/.config/alacritty/alacritty.yml "${df_path}"
  cpr -q --ignore-errors ~/.config/Code\ -\ OSS/User/settings.json "${df_path}/vscode/"

  echo "Copying folders..."
  cpr -rq --ignore-errors ~/.config/i3 "${df_path}"
  cpr -rq --ignore-errors ~/.config/polybar "${df_path}"
  cpr -rq --ignore-errors ~/.config/rofi "${df_path}"
  cpr -rq --ignore-errors ~/.config/dunst "${df_path}"
  cpr -rq --ignore-errors ~/.config/redshift "${df_path}"
  cpr -rq --ignore-errors ~/.config/proji "${df_path}"
  
  echo "Done..."
}


#####################################################
#
# BORG BACKUP
#
#####################################################


### Remote

# Mounten eines Remote-Borg-Backups.
# @param $1 Name des zu mountenden Remote-Archivs
# @param $2 Mount Pfad
function borg-mount-backup() {
    # Check parameter
    if [ ! -n "$1" ] || [ ! -n "$2" ]; then
        echo "Error: Missing parameter"
        echo "Syntax: borg-mount-backup <repo-name> <mount-path>"
        return 1
    fi

    # Execute borg mount
    borg mount borg@192.168.10.250:/betty/vault/backups/$HOST::"$1" "$2"
}


# Extrahieren eines Remote-Borg-Backups.
# @param $1 Name des zu mountenden Remote-Archivs
# Optional: @param $2 Unterordner des Archivs
function borg-extract-backup() {
    # Check parameter
    if [ ! -n "$1" ] && [ ! -n "$2" ]; then
        echo "Error: Missing parameter"
        echo "Syntax: borg-extract-backup <repo-name> [Optional: archive-folder]"
        return 1
    fi

    # Execute borg extract
    if [ -n "$1" ] && [ -n "$2" ]; then
        borg extract borg@192.168.10.250:/betty/vault/backups/$HOST::"$1" "$2"
    else
        borg extract borg@192.168.10.250:/betty/vault/backups/$HOST::"$1"
    fi
}


### USB

# Mounten eines Remote-Borg-Backups.
# @param $1 Name des zu mountenden Remote-Archivs
# @param $2 Mount Pfad
function borg-mount-backup() {
    # Check parameter
    if [ ! -n "$1" ] || [ ! -n "$2" ]; then
        echo "Error: Missing parameter"
        echo "Syntax: borg-mount-backup <repo-name> <mount-path>"
        return 1
    fi

    # Execute borg mount
    borg mount borg@192.168.10.250:/betty/vault/backups/$HOST::"$1" "$2"
}


# Extrahieren eines Remote-Borg-Backups.
# @param $1 Name des zu mountenden Remote-Archivs
# Optional: @param $2 Unterordner des Archivs
function borg-extract-backup() {
    # Check parameter
    if [ ! -n "$1" ] && [ ! -n "$2" ]; then
        echo "Error: Missing parameter"
        echo "Syntax: borg-extract-backup <repo-name> [Optional: archive-folder]"
        return 1
    fi

    # Execute borg extract
    if [ -n "$1" ] && [ -n "$2" ]; then
        borg extract borg@192.168.10.250:/betty/vault/backups/$HOST::"$1" "$2"
    else
        borg extract borg@192.168.10.250:/betty/vault/backups/$HOST::"$1"
    fi
}
